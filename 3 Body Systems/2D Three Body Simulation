import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

G = 6.67430e-11  #gravitational constant in m^3 kg^-1 s^-2

m1 = 5.972e24  #Earth mass
m2 = 1.989e30  #Sun1 mass
m3 = 1.989e30  #Sun2 mass

#initial positions in meters (this sample case is when one sun at the point of origin and the other one directly opposite of the Earth)
r1_0 = np.array([151600000e3, 0])
r2_0 = np.array([-151600000e3, 0])
r3_0 = np.array([0, 0])

#initial velocities in meters per second
v1_0 = np.array([0, 29722])  #Earth's orbital speed
mo1_0=m1*v1_0
v2_0 = np.array([0, -((mo1_0/m2)[1])/2]) #since two suns are identical in mass, they have the same initial velocity while having the system momentum of zero
v3_0 = np.array([0, -((mo1_0/m2)[1])/2])

#make everthing into a single vector
initial_state = np.concatenate((r1_0, r2_0, r3_0, v1_0, v2_0, v3_0))

#how long does the simulation runs for
t_span = (0, 86400 * 356 * 5)  # 5 years
t_eval = np.linspace(t_span[0], t_span[1], 100000)

#initial momentums, uncomment if you would like to see the results
mo1_0=m1*v1_0 #initial momentum of the earth
mo2_0=m2*v2_0 #initial momentum of the sun1
mo3_0=m3*v2_0 #initial momentum of the sun1
#print(mo1_0)
#print(mo2_0)
#print(mo3_0)

total_momentum= mo1_0+mo2_0+mo3_0
#print(total_momentum)

#main function used for the calculations
def motion_calculations(t, state):
  #reassagning the variables from the state vector
  r1 = state[0:2]
  r2 = state[2:4]
  r3 = state[4:6]
  v1 = state[6:8]
  v2 = state[8:10]
  v3 = state[10:12]

  #distance between the bodies
  r12 = np.linalg.norm(r2 - r1)
  r13 = np.linalg.norm(r3 - r1)
  r23 = np.linalg.norm(r3 - r2)

  #accelerations
  a1 = ( G * m2 * (r2 - r1) / r12**3 ) + ( G * m3 * (r3 - r1) / r13**3 )
  a2 = ( G * m1 * (r1 - r2) / r12**3 ) + ( G * m3 * (r3 - r2) / r23**3 )
  a3 = ( G * m1 * (r1 - r3) / r13**3 ) + ( G * m2 * (r2 - r3) / r23**3 )

  #velocities and accelerations into a vector
  derivatives = np.concatenate((v1, v2, v3, a1, a2, a3))
  return derivatives

#differential equations solution
solution = solve_ivp(motion_calculations, t_span, initial_state, t_eval=t_eval, rtol=1e-10, atol=1e-10)

#positions of the two bodies
r1_sol = solution.y[0:2]
r2_sol = solution.y[2:4]
r3_sol = solution.y[4:6]

#plotting
plt.figure(figsize=(8, 6))
plt.plot(r1_sol[0], r1_sol[1], label='Earth', color='blue')
plt.plot(r2_sol[0], r2_sol[1], label='Sun1', color='orange')
plt.plot(r3_sol[0], r3_sol[1], label='Sun2', color='red')
plt.scatter(r1_0[0], r1_0[1], color='blue', label='Earth (initial)')
plt.scatter(r2_0[0], r2_0[1], color='orange', label='Sun1 (initial)')
plt.scatter(r3_0[0], r3_0[1], color='red', label='Sun2 (initial)')
plt.xlabel('x position (m)')
plt.ylabel('y position (m)')
plt.legend()
plt.title('Three-Body Problem: Two Suns and Earth')
plt.grid(True)
plt.axis('equal')
plt.show()
